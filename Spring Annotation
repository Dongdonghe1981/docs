注解
@Autowired:自动注入
1.	默认按照类型去容器中找相应的组件：applicationContext.getBean(BookDao.class)
2.	如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找，applicationContext.getBean(“bookDao”)
3.	@Qualifier(“bookDao”),使用@Qualifier指定需要装配的组件ID，而不是使用属性名
@Qualifier(“dao”)
@Autowired
Private Dao dao;
4.	自动装配默认一定要将属性赋值好，没有就会报错。可以使用@Autowired(requierd=flase)，防止报错
5.	@Primary，让Spring进行自动装配的时候，默认使用首选的bean.
6.	@Resource Java规范，默认按照属性名注入，也可以改为按id注入，但不支持@Primary和@Autowire(required=false）功能
@Resource(name=”dao”)
Private Dao dao;
7.	@Inject，也是java规范，需要导入javax.inject包，和Autowired一样实现注入，但没有required=false功能
8.	@Autowired也可以标注在构造器、参数、方法、属性。
	标注在方法位置
@Autowired
//Spring容器创建当前对象时，就会调用该方法，完成赋值，方法使用的参数对象，从//IOC容器中获取
Public void setDao(Dao dao){
  This.dao = dao
}
	标注在有参构造方法上
默认加载到IOC容器中的对象，Spring会调用该对象的无参构造方法，创建对象。
Spring会调用该有参构造方法创建对象，参数是从IOC容器中获取。
如果只有一个有参构造方法，该标注可以省略
@Autowired
Public Dao(Name name){
This.name = name
}
	标注在参数上
作用跟标注在方法和构造方法的相同
Public Dao(@Autowired Name name){
This.name = name
}
@Bean标注的方法，创建对象的时候，方法的参数值从容器中获取
Aware注入Spring底层组件
自定义组件想要使用spring底层的一些组件（如：ApplicationContext、BeanFactory等），可以实现xxxAware接口，会调用接口规定的方法注入相关组件。
Aware接口是为了能够感知到自身的一些属性。
比如实现了ApplicationContextAware接口的类，能够获取到ApplicationContext，
实现了BeanFactoryAware接口的类，能够获取到BeanFactory对象。
每个xxxAware接口，对应自己的xxxAwarePostProcessor后置处理器
ApplicationContextAware  ==>  ApplicationContextAwareProcessor
Public class Demo implements ApplicationContextAware,BeanNameAware{}
//字符串解析器${}资源文件属性表达式，#{}spring表达式
public class Person implements EmbeddedValueResolverAware {
	@Override
	public void setEmbeddedValueResolver(StringValueResolver resolver) {
		String s = resolver.resolveStringValue("Hello! ${os.name},I'm #{2*20} years old!")
	}
}
@Value
1.	基本数值
2.	可以写SpEL，#{20-8}
3.	可以写${}，取出配置文件properties中的值，使用@PropertySource(value=”classpath:properties”)，导入类路径下的属性文件，可以使用数组，读取配置文件中k/v，保存到运行的环境变量中。@Value=”${key}”

Bean的生命周期
1.	指定初始化和销毁方法，通过@Bean指定init-method和destroy-method
2.	通过让Bean实现InitializingBean接口 定义初始化逻辑
实现DisposableBean接口 定义销毁逻辑
3.	可以使用JSR250：
@PostConstructor，在Bean创建完成，并且属性赋值完成，来执行初始化方法
@PreDestroy，在容器销毁Bean之前通知我们进行销毁操作
4.	BeanPostProcessor【interface】，Bean的后置处理器
在bean的初始化前后进行一些处理操作
postProcessorBeforeInitialization:在Bean实例化之后，任何初始化之前工作
postProcessorAfterInitialization:在初始化之后工作
。
Bean从实例化到初始化的执行顺序
Bean的构造方法->
后置处理器的postProcessorBeforeInitialization -> 
@PostConstructor 或者 @Bean指定init-method  或者 实现InitializingBean接口->
后置处理器的postProcessorAfterInitialization

Spring的单例对象的初始化主要分为三步：
（1）createBeanInstance：实例化，其实也就是调用对象的构造方法实例化对象
（2）populateBean：填充属性，这一步主要是多bean的依赖属性进行填充
（3）initializeBean：调用自定义的初始化方法

Spring为了解决单例的循环依赖问题，使用了三级缓存。
这三级缓存分别指： 
singletonFactories ： 单例对象工厂的cache ，singletonFactory.getObject()(三级缓存)
earlySingletonObjects ：提前暴光的单例对象的Cache ，没有完成初始化 （二级缓存）
singletonObjects：单例对象的cache，完成初始化 （一级缓存）

在创建bean的时候，首先想到的是从cache中获取这个单例的bean，这个缓存就是singletonObjects（一级缓存）。
如果获取不到，并且对象正在创建中，就再从二级缓存earlySingletonObjects中获取。
如果还是获取不到且允许singletonFactories通过getObject()获取，就从三级缓存singletonFactory.getObject()(三级缓存)获取，如果获取到了则：从singletonFactories中移除，并放入earlySingletonObjects中。
其实也就是从三级缓存移动到了二级缓存。

BeanPostProcessor原理
AbstractAutowireCapableBeanFactory.java

//PopulateBean()是给Bean的属性赋值(得到bean的所有属性，调用get/set方法等)
①populateBean(beanName, mbd, instanceWrapper);

②initializeBean()
{
//遍历容器内所有的BeanPostProcessor，挨个执行BeanPostProcessor的beforeInitialization，
//一旦返回null，跳出for循环，不会执行后面的BeanPostProcessor的.
 ②-1 wrappedBean = this.applyBeanPostProcessorsBeforeInitialization(bean, beanName)

//自定义初始化方法（@PostConstructor/@Bean指定init-method /实现InitializingBean接口）
 ②-2 invokeInitMethods(beanName, wrappedBean, mbd);

//执行过程跟before同样
 ②-3wrappedBean = this.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
}

BeanPostProcessor在Spring底层的应用
Spring底层对BeanPostProcessor的使用，包括bean赋值，注入其他组件，@Autowired，生命周期注解功能等等

1.ApplicationContextAwareProcessor.java
  程序员编写的Bean通过实现ApplicationContextAware接口，该后置处理器就可以将ioc容器注入到Bean中，
  是在该BeanPostProcessor的postProcessBeforeInitialization()方法中处理的。
public class Person implements ApplicationContextAware {
    private ApplicationContext applicationContext;
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }
}
给容器中注册组件
1.	包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）
2.	@Bean导入第三方包里的组件
3.	@Import快速给容器导入一个组件
a)	@Import（要导入到容器中的组件），容器会自动注册这个组件，id默认是全类名
b)	ImportSeletor 自定义逻辑返回需要导入组件的全类名数组
public class MyImportSelector implements ImportSelector {
    //返回值是导入到容器中的组件的全类名
    //AnnotationMetadata 当前标注@Import注解的类的所有注解信息
    public String[] selectImports(AnnotationMetadata annotationMetadata) {
        return new String[]{"com.color.Red","com.color.Blue"};
    }
}
====================================
@Import({Person.class, MyImportSelector.class})
public class BeanConfig {    
    public Person person(){return new Person();}
}
c)	ImportBeanDefinitionRegistrar 手动注册Bean到容器
public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {
     //annotationMetadata 当前类的注解信息
     // beanDefinitionRegistry BeanDefinition注册类，把所有要添加到容器中的Bean，调用 BeanDefinitionRegistry.registerBeanDefinition()手动注册
public void registerBeanDefinitions(AnnotationMetadata annotationMetadata,                                        BeanDefinitionRegistry beanDefinitionRegistry) {
       RootBeanDefinition beanDefinition = new RootBeanDefinition(Person.class);
        beanDefinitionRegistry.registerBeanDefinition("person",beanDefinition);
    }
}
==========================
@Import({Person.class, 
MyImportSelector.class, 
MyImportBeanDefinitionRegistrar.class})
public class BeanConfig {
    public Person person(){
        return new Person();
    }
}

BeanValidationPostProcessor   ---Bean的数据校验
InitDestroyAnnotationBeanPostProcessor   ---处理@PostConstruct和@PreDestroy注解
AutowiredAnnotationBeanPostProcessor ---处理@Autowired注解
@ComponentScan
1.	excludeFilter = Filter[]，指定扫描的时候按什么规则排除
2.	includeFilter = Filter[]，指定扫描的时候只需要包含哪些组件
3.	可以通过实现TypeFilter接口，自定义扫描规则

@Lazy
是针对singleton，容器启动时不创建对象，第一次使用时再创建
Prototype:多实例，ioc容器启动时并不会创建对象，而是每次获取时创建对象

@Conditional
按照一定的条件进行判断，满足条件给容器注册Bean
public class MyCondition implements Condition {
public boolean matches(ConditionContext conditionContext, 
AnnotatedTypeMetadata annotatedTypeMetadata) {
        if(conditionContext.getEnvironment().containsProperty("Windows")){
            return true;
        }else{
            return false;
        }
    }
}

public class BeanConfig {

    @Conditional({MyCondition.class})
    @Bean
    public Person person(){
        return new Person();
    }

}

@Profile
1.	加了@Profile标识的Bean，只有这个环境被激活的时候，才被注册到容器中。
2.	加在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能生效
Spring可以根据当前环境，动态的激活和切换一系列Bean的功能
开发环境	测试环境	生产环境
指定组件在哪个环境的情况下才能被注册到容器
@Profile("default") 默认环境
激活环境的方式
	使用命令行动态参数 -Dspring.profiles.active=test
	使用容器的无参构造方法
1.	创建一个applicationContext   new AnnotationConfigApplicationContext();
2.	设置需要激活的环境  context.getEnvironment().setActiveProfiles("test");
3.	注册主配置类  context.register(MainConfigOfProfile.class);
4.	启动刷新容器  context.refresh();
AOP
[动态代理]指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式
1.	导入aop模块：spring AOP（spring-aspects）
2.	定义一个业务逻辑类(MathCalculator),在业务运行的时候，将日志打印，(方法之前、之后、异常)
3.	定义一个日志切面类（LogAspects），切面类里的方法需要动态感知MathCalcutor.div运行到哪里，然后执行。
通知方法：
前置通知(@Before)：logStart()
后置通知(@After)：logEnd()，无论方法正常还是异常结束都调用
返回通知(@AfterReturning)：logReturn()
异常通知(@AfterThrowing)：logExcepton()
环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）
4.	给切面类的目标方法，何时何地运行（通知注解）
 //抽取公共的切入点表达式
    //1、本类引用
    //2、其他的切面引用
    @Pointcut("execution(public int aop.MathCalculator.*(..))")
public void pointCut(){}
5.	将切面类和业务逻辑类（目标方法所在类）都加入到容器中
6.	告诉容器哪个是切面类（给切面类加注解）@Aspect，告诉容器该类是切面类
7.	开启注解的Aspect模式 @EnableAspectJAutoProxy

JoinPoint参数，一定要作为第一个参数
三步
1.	将业务逻辑组件和切面类都加入到容器中，告诉Spring哪个类是切面类(@Aspect)
2.	在切面类的每一个通知方法上标注通知注释，告诉Spring何时何地运行(切入点表达式)
3.	开启基于注释的AOP模式@EnableAspectJAutoProxy

AOP原理
@EnableAspectJAutoProxy
理解
1.	在config类里引入了@EnableAspectJAutoProxy
2.	当ApplicationContext对config类进行初始化时，要解析该注解
3.	该注解@Import了一个AspectJAutoProxyRegistrar.java类，该类实现自定义注册组件
4.	该类注册了一个AnnotationAwareAspectJAutoProxyCreator.java类。
5.	该类实现了BeanPostProcessor，所以会在bean初始化时完成AOP功能植入
给容器中注入了什么组件，这个组件什么时候工作，这个组件的功能是什么
1.	@EnableAspectJAutoProxy是什么？
@Import({AspectJAutoProxyRegistrar.class})  给容器中导入AspectJAutoProxyRegistrar类
利用AspectJAutoProxyRegistrar自定义给容器
中注册一个AnnotationAwareAspectJAutoProxyCreator
AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);
AspectJAutoProxyRegistrar.java
return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);
AopConfigUtils.java
2.	AnnotationAwareAspectJAutoProxyCreator
->AspectJAwareAdvisorAutoProxyCreator
  ->AbstractAdvisorAutoProxyCreator
-> AbstractAutoProxyCreator
     Implements SmartInstantiationAwareBeanPostProcessor , BeanFactoryAware
     关注后置处理器，自动装配BeanFactory

AbstractAutoProxyCreator.setBeanFactory()
AbstractAutoProxyCreator.后置处理器逻辑
AbstractAdvisorAutoProxyCreator. setBeanFactory()重写->initBeanFactory()
AnnotationAwareAspectJAutoProxyCreator.initBeanFactory()
AOP调用流程- 注册和创建AnnotationAwareAspectJAutoProxyCreator
1.	传入配置类，创建IOC容器
2.	注册配置类，调用refresh()，刷新容器。 AbstractApplicationContext.java
3.	registerBeanPostProcessors(beanFactory)注册Bean  AbstractApplicationContext.java
1）、先获取ioc容器已经定义了的需要创建对象的所有BeanProcessor 
	 beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);
     PostProcessorRegistrationDelegate.java
2)、给容器中加入其他的BeanProcessor
beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));
PostProcessorRegistrationDelegate.java
3)、优先注册实现了PriorityOrdered接口的BeanPostProcessor
4）、接着注册实现了Ordered接口的BeanPostProcessor
5）、最后注册剩余的BeanPostProcessor
6)、注册BeanPostProcessor，实际上是创建BeanPostProcessor对象，保存在容器中
beanFactory.getBean(ppName, BeanPostProcessor.class);
PostProcessorRegistrationDelegate.java Line.229
	创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】
     a)、创建Bean的实例
 		先从容器中获取， 
		getSingleton(beanName) 
获取不到时，创建bean
		return createBean(beanName, mbd, args)
		AbstractBeanFactory.java Line.314
doCreateBean(beanName, mbdToUse, args);
	AbstractAutowireCapableBeanFactory.java Line.495 
		创建bean实例
instanceWrapper = createBeanInstance(beanName, mbd, args);
		AbstractAutowireCapableBeanFactory.java Line.536
	 b)、populateBean 给Bean的各种属性赋值
AbstractAutowireCapableBeanFactory.java Line.575
	 c)、initializeBean 初始化Bean  
		AbstractAutowireCapableBeanFactory.java Line.576
		c-1）invokeAwareMethods()  处理Aware接口的方法回调,setBeanFactory
			 AbstractAutowireCapableBeanFactory.java Line.1685 - 1708
		c-2）applyBeanPostProcessorsBeforeInitialization() 应用
后置处理器的postProcessorBeforeInitialization()
  			c-3)  invokeInitMethods() 执行自定义的初始化方法
			c-4)  applyBeanPostProcessorsAfterInitialization()
         d)、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功
	7)、把BeanPostProcessor注册到BeanFactory
         beanFactory.addBeanPostProcessor(postprocessor)
registerBeanPostProcessors(beanFactory, orderedPostProcessors);
PostProcessorRegistrationDelegate.java Line.237
==========以上是创建和注册AnnotationAwareAspectJAutoProxyCreator	的过程
实例化前处理-AnnotationAwareAspectJAutoProxyCreator
AnnotationAwareAspectJAutoProxyCreator是InstantiationAwareBeanPostProcessor类型的后置处理器
finishBeanFactoryInitialization(beanFactory);完成BeanFactory初始化工作
1.	遍历容器中所有的Bean，依次创建对象getBean(beanName)
getBean(beanName) -> doGetBean() -> getSingleton()
2.	创建bean
  【AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截器】
1)	先从缓存中获取当前的bean，如果获取到，说明bean是之前被创建过的，直接使用，否则再创建
只要创建好的Bean都会被缓存起来
2)	createBean()，创建bean
          【AnnotationAwareAspectJAutoProxyCreator会在任何bean创建之前尝试返回bean的实例
          【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】、
          【InstantiationAwareBeanPostProcessor是在创建Bean实例之前先尝试用后置处理器返回对象】
a)	resolveBeforeInstantiation(beanName,mdbToUse);解析BeforeInstantiation
           希望后置处理器在此能返回一个代理对象；如果能返回代理对象就使用，如果不能就继续
后置处理器先尝试返回对象  bean = applyBeanPostProcessorsBeforeInstantiation()
			拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor
			就执行postProcessBeforeInstantiation
			if(bean !=null){
		   		bean = applyBeanPostProcessorsAfterInitialization(bean,beanName)
			}
b)	doCreateBean(beanName,mdbToUse,args)真正去创建一个Bean实例，和createBean()一样

创建AOP代理对象
applyBeanPostProcessorsBeforeInstantiation() <=AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation()   
每个bean创建之前，调用postProcessBeforeInstantiation() 关心切面类和切入类的创建
一、	判断当前bean是否需要创建AOP代理对象  AbstractAutoProxyCreator.java
1.判断当前bean是否在adviseBeans中(保存所有需要增强的bean)
2.判断当前bean是否是基础类型Advice、Pointcut、Advisor或者是否切面@Aspect
3.是否需要跳过   AspectJAwareAdvisorAutoProxyCreator.shouldSkip()
    1）获取候选的增强器（切面里的通知方法）candidateAdvisors
判断每一个增强器是否是AspectJPointcutAdvisor类型的，返回true
         每一个封装的通知方法的增强器是InstantiationModelAwarePointcutAdvisor，所以返回false
    2)  永远返回false
调用config类里@Bean注解的需要增强bean的构造方法
二、	创建AOP代理对象
postProcessAfterInitializatio()           AbstractAutoProxyCreator.java
    return wrapIfNecessary()  包装如果需要的情况下
   1、获取当前bean所有的增强器（通知方法）
            1）、找到候选（candiate）的所有增强器（找哪些通知方法是需要切入当前bean方法的）
            2）、获取到能在bean中使用的增强器
            3）、给增强器排序
   2、保存当前bean在adviseBeans中
   3、如果当前bean需要增强，创建当前bean的代理对象
           1）、获取所有增强器（通知方法）
           2）、保存到proxyFactory
           3）、创建代理对象：Spring自动决定
                 JdkDynamicAopProxy  ->jdk动态代理
                 ObjenesisCglibAopProxy  ->CGLib的动态代理
给容器中返回当前组件使用CGLib增强了的代理对象
以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法

获取拦截器链-MethodInterceptor
目标方法执行
容器中保存了组件的代理对象（CGLib增强后的对象），这个对象里面保存了详细信息（比如增强器、目标对象）
1.	CglibAopProxy.intercept
2.	根据ProxyFactory对象获取将要执行的目标方法拦截器链
List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
AdvisedSupport
	DefaultAdvisorChainFactory
	1）、List<Object> interceptorList保存所有拦截器
		一个默认的ExposeInvocationInterceptor 和 自定义的增强器
	2）、遍历所有的增强器，将其转为Interceptor
		Registry.getInterceptors(advisor)
	3）、将增强器转为List<MethodInterceptor>
		如果是MethodInterceptor，直接加入到集合中
		如果不是，使用AdvisorAdaptor将增强器转为MethodInterceptor
		转换完成返回MethodInterceptor数组
3.	如果没有拦截器链，直接执行目标方法
拦截器链：每一个通知方法，又被包装为方法拦截器MethodInterceptor机制
4.	如果有拦截器链，把需要执行的目标对象、目标方法、拦截器链等信息传入到一个CglibMethodInvocation对象，
并调用proceed()
5.	拦截器链的触发过程
链式调用通知方法
1.	如果没有拦截器执行目标方法，或者执行到最后一个拦截器的时候，执行目标方法
拦截器的索引从-1开始
2.	链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再执行
拦截器链的机制，保证通知方法和目标方法的执行顺序
拦截器链结构
[0]ExposeInvocationIterceptor
[1]AspectJAfterThrowingAdvice
[2]AfterReturnningAdviceInterceptor
[3]AspectJAfterAdvice
[4]MethodBeforeAdviceInterceptor

执行顺序
[4]MethodBeforeAdviceInterceptor
目标方法
[3]AspectJAfterAdvice
[2]AfterReturnningAdviceInterceptor
[1]AspectJAfterThrowingAdvice
[0]ExposeInvocationIterceptor
AOP总结
1.	@EnableAspectJAutoProxy 开启AOP
2.	@EnableAspectJAutoProxy会给容器中注入一个组件AnnotationAwareAspectJAutoProxyCreator，
3.	AnnotationAwareAspectJAutoProxyCreator实现BeanPostProcessor接口，所以是一个后置处理器
4.	容器的创建流程
a)	registerBeanPostProcessors() 注册后置处理器
创建AnnotationAwareAspectJAutoProxyCreator对象
b)	finishBeanFactoryInitialization()初始化剩下的单实例bean
1)	创建业务逻辑组件和切面	
2)	AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程
3)	组件创建完成之后，判断组件是否需要增强
是：切面的通知方法，包装成增强器（Advisor），给业务逻辑创建一个代理对象(cglib)
5.	执行目标方法
a)	代理对象执行目标方法
b)	CglibAopProxy.intercept()
1)	得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）
2)	利用拦截器的链式机制，依次进入每个拦截器进行执行
3)	效果：
正常执行：前置通知->目标方法->后置通知->返回通知
出现异常：前置通知->目标方法->后置通知->异常通知

声明式事务
1.	导入相关依赖：数据源、数据库驱动、spring-jdbc模块
2.	在config类上加上配置数据源、JdbcTemplate(spring提供的简化数据库操作的数据)操作数据
@Bean
public JdbcTemplate jdbcTemplate() throws PropertyVetoException {
  JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource());
  return jdbcTemplate;
 }
3.	给方法加上注解@Transactional，表示当前方法是一个事务方法
4.	在config类上加上注解@EnableTransactionManagement，开启基于注解的事务管理功能
5.	在config类里配置事务管理器来控制事务
 @Bean
public PlatformTransactionManager platformTransactionManager() throws PropertyVetoException {
    	return new DataSourceTransactionManager(dataSource()) ;
}
事务原理
@ EnableTransactionManagement
	利用TransactionManagementConfigurationSelector给容器导入两个组件
a)	AutoProxyRegistrar
给容器注入InfrastructureAdvisorAutoProxyCreator组件，该组件是一个后置处理器，利用后置处理器，在对象实例化之后，包装对象，返回一个代理对象（增强器）
b)	ProxyTransactionManagementConfiguration
给容器注入事务增强器 1.AnnotationTransactionAttributeSource，2.TransactionInterceptor
1)	事务增强器要用到事务注解的信息，用AnnotationTransactionAttributeSource解析事务注解
2)	事务拦截器TransactionInterceptor，保存了事务属性信息，事务管理器。它是一个MethodInterceptor，在目标方法执行的时候，执行拦截器链，
事务拦截器TransactionInterceptor extends TransactionAspectSupport
1.	先获取事务相关的属性
2.	再获取PlatformTransactionManager，如果事先没有添加指定任何的PlatformTransactionManager，最终会从容器中按照类型获取一个PlatformTransactionManager。（TransactionAspectSupport Line.395）
3.	执行目标方法，
如果异常，获取事务管理器，利用事务管理器回滚操作completeTransactionAfterThrowing();如果正常，获取事务管理器，提交事务commitTransactionAfterReturning()

扩展原理
BeanFactoryPostProcessor
BeanPostProcessor：bean的后置处理器，bean创建对象初始化前后进行拦截工作
BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后调用，所有的bean定义已经保存加载到BeanFactory，但Bean的实例还没有创建
调用过程
1.	IOC容器创建对象
2.	invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
a)	直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法
b)	在初始化创建其他组件前执行

BeanDefinitionRegistryPostProcessor
BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor
postProcessBeanDefinitionRegistry();所有bean定义信息将要被加载,bean实例还没有创建
优先于BeanFactoryPostProcessor执行，利用BeanDefinitionRegistryPostProcessor给容器额外再添加一些组件。

1.	创建IOC容器
2.	Refresh() -> invokeBeanFactoryPostProcessors(beanFactory);
3.	先从容器中获取到所有的BeanDefinitionRegistryPostProcessor，
a)	首先调用所有的postProcessBeanDefinitionRegistry()方法
b)	接着调用postProcessBeanFactory()方法
从容器中BeanFactoryPostProcessor组件，然后依次调用postProcessBeanFactory()方法

ApplicationListener
监听容器中发布的事件。事件驱动模型开发。
public interface ApplicationListener<E extends ApplicationEvent> extends EventListener
监听ApplicationEvent及其下面的子事件。
当容器中发布此事件，该方法会被调用
步骤
1.	写一个监听器来监听某个事件（ApplicationEvent及其子类）
2.	把监听器加入到容器中
3.	只要容器中有相关事件发布，我们就能监听到此事件：
a)	ContextRefreshedEvent：容易刷新完成（所有bean都完全创建）会发布这个事件
b)	ContextClosedEvent：关闭容器会发布这个事件
4.	发布一个事件：applicationContext.publishEvent()
原理
ContextRefreshedEvent,
1)	ContextRefreshedEvent事件
2)	容器创建对象：refresh()
3)	容器刷新完成：finishRefresh()，会发布
也可以自己发布事件
容器关闭事件
4)	publishEvent(new ContextRefreshedEvent(this));
【事件发布流程】
a)	获取事件的派发器：getApplicationEventMulticaster()
b)	multicastEvent()派发事件
c)	获取到所有的ApplicationListener
for (final ApplicationListener<?> listener : getApplicationListeners(event, type)) {
1.如果有Excutor，可以支持Excutor进行异步派发
2.否则，同步的方式直接执行Listener方法invokeListener(listener,event)
  拿到listener回调OnApplicationEvent方法
【事件派发器】
1.	容器创建对象Refresh
2.	initApplicationEventMulticaster()，初始化ApplicationEventMulticaster
1)	先到容器中找有没有id=applicationEventMulticaster，的组件，
2)	如果没有创建this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
并且加入到容器中，我们就可以在其他组件要派发事件，自动注入applicationEventMulticaster
【容器中有哪些监听器】
容器创建对象Refresh
注册监听器，从容器中拿到所有的监听器，把他们注册到applicationEventMulticaster中
String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
for (String listenerBeanName : listenerBeanNames) {
//将listener注册到applicationEventMulticaster中
    getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
}
@EventListener
另外一种方式：@EventListener(class=ApplicationEvent.class)
原理：使用EventListenerMethodProcessor后置处理器来解析该注解，该后置处理器实现SmartInitializingSingleton接口
SmartInitializingSingleton原理
1.	IOC容器创建对象，refresh()
2.	finishBeanFactoryInitialization(beanFactory)，初始化剩余的单实例bean
1)	先创建所有的单实例bean：getBean()
2)	获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton类型，如果是调用afterSingletonsInstantiated

Spring容器创建
1.	prepareRefresh()
刷新前的预处理
1)	initPropertySources初始化一些属性设置；ApplicationContext的子类自定义个性化的属性设置方法
2)	getEnvironment().validateRequiredProperties();校验属性
3)	this.earlyApplicationEvents = new LinkedHashSet<>();保存容器中一些早期的事件
2.obtainFreshBeanFactory();
获取beanFactory
1)	refreshBeanFactory();刷新BeanFactory
		创建了一个Bean工厂this.beanFactory = new DefaultListableBeanFactory();，设置id
2)	getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象
3)	将创建的BeanFactory(DefaultListableBeanFactory)返回
3.prepareBeanFactory(beanFactory);
BeanFactory的预准备工作（BeanFactory进行一些设置）
	1）设置BeanFactory的类加载器、支持表达式解析器
	2）添加部分BeanPostProcessor（ApplicationContextAwareProcessor）
	3）设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware、xxxAware
	4）注册可以解析的自动装配，我们能直接在任何组件中自动注入：BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
	5）添加BeanPostProcessor（ApplicationListenerDetector）
	6）添加编译时的AspectJ
	7）给BeanFactory注册默认的环境组件
		environment（ConfigurableEnvironment）
		systemProperties（Map<String,Object>）
		systemEnvironment（Map<String,Object>）
4.postProcessBeanFactory(beanFactory);
BeanFactory准备工作完成后进行的后置处理工作
	1）ApplicationContext的子类通过重写这个方法来在BeanFactory创建并预准备完成以后进行进一步的设置
==================以上是BeanFactory创建及预准备工作=============
5.invokeBeanFactoryPostProcessors(beanFactory);
执行BeanFactoryPostProcessor
	BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后执行
	两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
	1）先执行BeanDefinitionRegistryPostProcessor
			a）获取所有的BeanDefinitionRegistryPostProcessor
			b）先执行PriorityOrdered接口的BeanDefinitionRegistryPostProcessor
				postProcessor.postProcessBeanDefinitionRegistry(registry);
			c）再执行Ordered接口的BeanDefinitionRegistryPostProcessor
				postProcessor.postProcessBeanDefinitionRegistry(registry);
			d）最后执行没有实现PriorityOrdered和Ordered接口BeanDefinitionRegistryPostProcessor
	2）再执行BeanFactoryPostProcessor
			a）获取所有的BeanFactoryPostProcessor
			b）先执行PriorityOrdered接口的BeanFactoryPostProcessor
				postProcessor.postProcessBeanDefinitionRegistry(registry);
			c）再执行Ordered接口的BeanFactoryPostProcessor
				postProcessor.postProcessBeanDefinitionRegistry(registry);
			d）最后执行没有实现PriorityOrdered和Ordered接口BeanFactoryPostProcessor
6.registerBeanPostProcessors(beanFactory);
注册BeanPostProcessor（Bean的后置处理器）
	不同接口类型的BeanPostProcessor，在Bean创建前后的执行时机不同
	BeanPostProcessor -> 4.bean初始化之前调用，和之后
	DestructionAwareBeanPostProcessor
	InstantiationAwareBeanPostProcessor -> 1.bean实例化之前调用（3.属性赋值之前）
	SmartInstantiationAwareBeanPostProcessor
	MergedBeanDefinitionPostProcessor -> 2.bean实例化之后调用
	1）获取所有的BeanPostProcessor，后置处理器都默认可以通过PriorityOrdered和Ordered接口指定优先级
	2）先注册PriorityOrdered接口的BeanPostProcessor;
		把每一个BeanPostProcessor添加到BeanFactory中
		beanFactory.addBeanPostProcessor(postProcessor);
	3）再注册Ordered接口的BeanPostProcessor
	4）然后注册没有实现任何优先级接口的BeanPostProcessor
	5）然后注册MergedBeanDefinitionPostProcessor
	6）注册一个ApplicationListenerDetector，在Bean创建完成后检查是否是ApplicationListener,如果是的话，
添加到容器中
		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
7.initMessageSource();
初始化MessageSource组件（国际化功能、消息绑定、消息解析）
	1）获取BeanFactory
	2）看容器中是否有id为messageSource的组件，类型是MessageSource的组件
		如果有,赋值给messageSource，如果没有自己创建一个DelegatingMessageSource
			MessageSource:取出国际化配置文件中的某个key的值，能按照区域信息获取
	3）把创建好的MessageSource注册到容器中，以后获取国际化配置文件值的时候，
可以自动注入MessageSource
		MessageSource.getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale)
8.	initApplicationEventMulticaster();
初始化事件派发器
	1）获取BeanFactory
	2）从BeanFactory中获取ApplicationEventMulticaster
	3）如果获取不到，创建一个SimpleApplicationEventMulticaster，添加到容器中，以后其他组件可以自动注入
9.onRefresh();
	ApplicationContext的子类重写这个方法，在容器刷新的时候可以自定义逻辑
10.registerListeners();
	将项目里的ApplicationListener注册到容器中
	1）从容器中拿到所有的ApplicationListener
	2）将每个监听器添加到事件派发器中
		getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
	3）派发之前产生的事件
		getApplicationEventMulticaster().multicastEvent(earlyEvent);
11.finishBeanFactoryInitialization(beanFactory);
初始化所有剩下的单实例bean
	beanFactory.preInstantiateSingletons();初始化剩下的单实例Bean
		1）获取容器中所有的Bean，依次进行初始化和创建对象
		2）获取Bean的定义信息RootBeanDefinition
		3）Bean不是抽象的、是单实例的、不是懒加载的
			a.判断是否是FactoryBean，是否实现FactoryBean接口的Bean
			b.不是工厂Bean，利用getBean(beanName)创建对象
				1 getBean(beanName)
				2 doGetBean(name, null, null, false);
				3 先获取缓存中保存的单实例Bean，如果能获取到说明这个Bean
之前被创建过（所有被创建过的Bean都会被缓存起来）
					singletonObjects = new ConcurrentHashMap<>(256);
				4  缓存中获取不到，开始Bean的创建对象流程
				5  标记当前bean已经被创建
				6  获取Bean的定义信息
				7  获取当前Bean的依赖的其他Bean，如果有通过getBean()，把依赖的Bean先创建出来
				8  启动单实例Bean的创建流程
					1）createBean(beanName, mbd, args);
					2）Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
							让BeanPostProcessor先拦截创建代理对象【InstantiationAwareBeanPostProcessors】
							先触发applyBeanPostProcessorsBeforeInstantiation()
							如果有返回值再触发applyBeanPostProcessorsAfterInitialization()
					3）如果上一步的InstantiationAwareBeanPostProcessors没有返回代理对象，继续进行4）
					4）Object beanInstance = doCreateBean(beanName, mbdToUse, args);
						a）【创建Bean实例】instanceWrapper = createBeanInstance(beanName, mbd, args);
							利用工厂方法或对象的构造方法创建对象
b）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);【MergedBeanDefinitionPostProcessor】
							调用postProcessMergedBeanDefinition()
						c）【Bean属性赋值】populateBean(beanName, mbd, instanceWrapper);
							赋值之前：
							c.1）调用【InstantiationAwareBeanPostProcessor】的postProcessAfterInstantiation()
							c.2）调用【InstantiationAwareBeanPostProcessor】postProcessPropertyValues()
							赋值：
							c.3）为属性利用setter方法进行赋值，
applyPropertyValues(beanName, mbd, bw, pvs);
						d）【Bean初始化】exposedObject = initializeBean(beanName, exposedObject, mbd);
							d.1）【调用Aware接口方法】invokeAwareMethods(beanName, bean);
bean实现aware接口的话，调用aware接口的回调
								BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
							d.2）【调用后置处理器方法】
applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
【BeanPostProcessor】
								BeanPostProcessor.postProcessBeforeInitialization(result, beanName);
							d.3）【调用初始化方法】invokeInitMethods(beanName, wrappedBean, mbd)
								① 是否是InitializingBean接口，执行接口规定的初始化方法
								② 是否自定义初始化方法
							d.4）【调用后置处理器方法】
applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
【BeanPostProcessor】
								BeanPostProcessor.postProcessAfterInitialization(result, beanName);
							d.5）注册Bean的销毁方法
						e）将创建的Bean添加到singletonObjects缓存中
							addSingleton(beanName, singletonObject);
				9 所有的Bean都利用getBean()创建完成之后，
检查所有的Bean是否是【SmartInitializingSingleton】接口，
				  如果是，执行afterSingletonsInstantiated();
12.finishRefresh();
完成IOC容器的Bean的初始化工作
	1）initLifecycleProcessor();初始化和生命周期有关的后置处理器
		默认从容器中得到 LifecycleProcessor的组件，如果没有创建DefaultLifecycleProcessor实例
		可以写一个LifecycleProcessor的实现类，在此调用
			void onRefresh();
			void onClose();
	2）getLifecycleProcessor().onRefresh();
		获得前一步的生命周期处理器，回调onRefresh()
	3）发布容器刷新完成事件publishEvent(new ContextRefreshedEvent(this));
	4）LiveBeansView.registerApplicationContext(this); 注册容器到MBean

总结
1.Spring容器在启动的时候，会先保存所有注册进来的Bean的定义信息
	1）xml注册bean<bean>
	2）注解注册@Service、@Component、@Bean
2.Spring会在合适的时机创建这些Bean
	1）用到这个Bean的时候，利用getBean创建Bean，创建好之后保存在容器中
	2）统一创建所有Bean的时机，finishBeanFactoryInitialization(beanFactory);
3.后置处理器，每个Bean创建完成，都会使用各种后置处理器进行处理，来增强Bean的功能
	AutowiredAnnotationBeanPostProcessor：处理自动注入
	AnnotationAwareAspectJAutoProxyCreator：处理AOP功能
4.事件驱动模式：
	ApplicationListener：事件监听
	ApplicationEventMulticaster：事件派发

BeanFactoryPostProcessor：是针对于beanFactory的处理器，即spring会在beanFactory初始化之后，beanDefinition都已经loaded，但是bean还未创建前进行调用，可以修改，增加beanDefinition
BeanPostProcessor：是针对bean的处理器，即spring会在bean初始化前后 调用方法对bean进行处理

Servlet3.0
Shared libraries(共享库) / runtimes pluggability(运行时插件能力)
1.	Servlet容器启动会扫描当前应用里每一个jar包的ServletContainerInitializer的实现
2.	提供ServletContainerInitializer的实现类，
必须绑定在META-INF/services/javax.servlet. ServletContainerInitializer
文件的内容就是ServletContainerInitializer实现类的全类名
3.	启动并运行该实现类
应用启动的时候，会运行onStartup方法
Set<Class<?>> arg0:所有类型的子类型
ServletContext arg1：代表当前Web应用的ServletContext，一个Web应用只有一个ServletContext
使用ServletContext注册Web组件（Servlet，Filter，Listener）
如果导入第三方组件的话，可以使用该方法
使用编码的方式，在项目启动的时候给ServletContext里面添加组件
	必须在项目启动的时候添加
1）	ServletContainerInitializer得到ServletContext
2）	ServletContextListener得到ServletContext

Servlet3.0-与SpringMVC整合分析
官方文档
https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc-servlet
1.	Web容器在启动的时候，会扫描每个Jar包下的META-INFO/services/javax.servlet.ServletContainerInitializer
2.	加载这个文件指定的类org.springframework.web.SpringServletContainerInitializer
3.	Spring应用启动时会加载WebApplicationInitializer接口下的所有组件
4.	为这些组件创建对象（组件不是接口，不是抽象类）
a)	AbstractContextLoaderInitializer：创建一个根容器createRootApplicationContext()
b)	AbstractDispatcherServletInitializer：
创建一个Web的IOC容器createServletApplicationContext()
创建一个DispatcherServlet，createDispatcherServlet()
将创建的DispatcherServlet添加到ServletContext中
c)	AbstractAnnotationConfigDispatcherServletInitializer：注解方式配置的DispatchServlet初始化器
创建一个根容器createRootApplicationContext()
创建一个Web的IOC容器createServletApplicationContext()
总结：以注解的方式来启动SpringMVC，继承AbstractAnnotationConfigDispatcherServletInitializer，
	实现抽象方法指定DispatchServlet的配置信息。
 
定制SpringMVC
1.@EnableWebMvc：开启SpringMVC定制配置功能，<mvc:annotation-driven>
2.	配置组件（视图解析器、视图映射、静态资源映射）继承
extends WebMvcConfigurerAdapter
SpringMVC-异步请求-返回Callable
1.	控制器返回Callable
2.	SpringMVC异步处理，将Callable提交到TaskExcutor，使用一个隔离的线程执行
3.	Dispacher和所有的filter退出Web容器线程，但response保持打开状态
4.	Callable返回结果，SpringMVC将请求重新派发给容器，恢复之前的处理。
5.	根据Callable返回的结果。SpringMVC继续进行视图渲染等流程（收请求->视图渲染）
处理流程
preHandle....http://localhost:8080/springmvc-annotation/async01
main thread startThread[http-bio-8080-exec-4,5,main]
main thread endThread[http-bio-8080-exec-4,5,main]
===============DispatcherServlet及所有的Filter退出线程
		
===============等待Callable执行
sub thread startThread[MvcAsync1,5,main]
sub thread endThread[MvcAsync1,5,main]
===============Callable执行完成
preHandle....http://localhost:8080/springmvc-annotation/async01
postHandle....（Callable的返回值，就是目标方法的返回值）
afterCompletion...

异步拦截器：
1）、原生API的AsyncListener
	2）、SpringMVC：实现AsyncHandlerInterceptor
